const express = require('express');
const app = express();
const router = express.Router();
const bcrypt = require("bcrypt");
const multer = require('multer');
const bodyParser = require('body-parser');
const urlencodedParser = bodyParser.urlencoded({ extended: false });
const mongoose = require('mongoose');
var Schema=mongoose.Schema;
 mongoose.connect(" mongodb+srv://csci3100:groupproject@cluster0-j17xd.mongodb.net/csci");
 var db = mongoose.connection;
 db.on('error', console.error.bind(console, 'Connection error:'));
 db.once('open', function () {
console.log("Connection is open..."); });
const Pizza = require("/Pizza");
const Order = require("/Order");
const User = require("/User");
const ShoppingCart = require("/ShoppingCart");

//for upload inage
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, './uploads/');
  },
  filename: function(req, file, cb) {
    cb(null, new Date().toISOString() + file.originalname);
  }
});
//create new pizza and upload image
app.post("/", (req, res, next) => {
  const pizzaNew = new Pizza({
    _id: new mongoose.Types.ObjectId(),
    name: req.body.name,
    price: req.body.price,
    pizzaImage: req.file.path 
  });
  product.save().then(result => {
      console.log(result)
    })  
    });

//get information of pizza
app.get("/:pizzaId", (req, res, next) => {
  const id = req.params.pizzaId;
  Product.findById(id)
    .select('name price _id pizzaImage')
    .exec()
    .then(doc => {
      if (doc) {
        res.status(200).json({
            pizza: doc,
        });
      } 
    });
});

//delete Pizza information
app.delete("/:pizzaId", (req, res, next) => {
  const id = req.params.pizzaId;
  Product.remove({ _id: id })
    });

:eventId',function(req,res){
Event.findOne(
{eventId: req.params['eventId']}).populate('loc').

//get the user information with Email 
app.get("/:email", (req, res, next) => {
  User.findone({email: req.params['email']}).populate({path: 'Order'}, {path: 'ShoppingCart'})
    .exec()
    .then(docs => {
      res.status(200).json({
        orders: docs.map(doc => {
          return {
            _id: doc._id,
            name: doc.name,
            product: doc.product,
            quantity: doc.quantity,
            orderHistory:doc.orderHistory,
            shoppingCart:doc.shoppingCart
          };
        })
      });
    })
    });

    
//add a new norder
app.post("/order", (req, res, next) => {
  pizza.findById(req.body.productId)
    .then(product => {
      const order = new Order({
       email:req.body.quantity,
        _id: mongoose.Types.ObjectId(),
        quantity: req.body.quantity,
        product: req.body.productId
      });
      return order.save();
    })
    .then(result => {
      console.log(result);
      res.status(201).json({
        createdOrder: {
         address:result.address,
          phone:result.phone,
          _id: result._id,
          product: result.product,
          quantity: result.quantity
        }
      });
    });
});

//get order information
app.get("/:orderId", (req, res, next) => {
  Order.findById(req.params.orderId)
    .exec()
    .then(order => {
      res.status(200).json({
    product: order.productSelect.product,
    quantity: order.quantity,
    address:order.quantity,
    totalPrice:order.totalPrice: 
      });
    });
    });

//delete order
app.delete("/:orderId", (req, res, next) => {
  Order.remove({ _id: req.params.orderId })
    .exec()
    .then(result => {
      res.status(200).json({
        message: "Order deleted",
      });
    });
    });

//signup account
app.post("/signup", (req, res, next) => {
  User.find({ email: req.body.email })
    .exec(function(err,user){
      if (user.length >= 1) {
        return res.status(409).json({
          message: "Mail exists"
        });
      } else {
        bcrypt.hash(req.body.password, 10, (err, hash) => {
          if (err) {
            return res.status(500).json({
              error: err
            });
          } else {
            const user = new User({
              _id: new mongoose.Types.ObjectId(),
              email: req.body.email,
              password: hash
              
            });
            user
              .save()
              .then(result => {
                console.log(result);
                res.status(201).json({
                  message: "User created"
                });
              });
              };
              });
        };
    });});
    
//fillup personal information
app.put("/update/:id", (req, res, next) => {
var id=req.params.id;
User.findone({_id:id}).populate({path: 'Order'}, {path: 'ShoppingCart'}).exec(functon(err,result){
if(err){
console.log(err);
res.status(500).send();
}else{
if(!result){
res.status(404).send();}
else{
if(req.body.phone){
result.phone=req.body.phone;}
if(req.body.orderId){
result.orderHistory.push(result.orderId);
result.save(done);}
if(req.body.address){
result.address=req.body.address;}
if(req.body.shoppingCart){
result.address=req.body.shoppingCart;}
}
}})});

//login
app.post("/login", (req, res, next) => {
  User.find({ email: req.body.email })
    .exec(fuction(err,user){
      if (user.length < 1) {
        return res.status(401).json({
          message: "Auth failed"
        });
      }
      bcrypt.compare(req.body.password, user[0].password, (err, result) => {
        if (err) {
          return res.status(401).json({
            message: "Auth failed"
          });
        }
        if (result) {
          const token = jwt.sign(
            {
              email: user[0].email,
              userId: user[0]._id
            },
            process.env.JWT_KEY,
            {
                expiresIn: "1h"
            }
          );
          return res.status(200).json({
            message: "Auth successful",
            token: token
          });
        }
        res.status(401).json({
          message: "Auth failed"
        });
      });
    })
});

    




const server = app.listen(3000);;
